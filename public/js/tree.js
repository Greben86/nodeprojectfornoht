function hasClass(elem, className) {    return new RegExp("(^|\\s)"+className+"(\\s|$)").test(elem.className);}function toggleNode(node) {    // определить новый класс для узла    var newClass = hasClass(node, 'ExpandOpen') ? 'ExpandClosed' : 'ExpandOpen';    // заменить текущий класс на newClass    // регексп находит отдельно стоящий open|close и меняет на newClass    var re =  /(^|\s)(ExpandOpen|ExpandClosed)(\s|$)/;    node.className = node.className.replace(re, '$1'+newClass+'$3');}function load(node) {    function showLoading(on) {        var expand = node.getElementsByTagName('DIV')[0];        expand.className = on ? 'ExpandLoading' : 'Expand';    }    function onLoaded(data) {        for(var item of data) {            var divexpand = $('<div>')                    .addClass('Expand')                    .bind('click', function(event){                        clickExpand(event);                    });            var fastlink = $( '<a>' )                    .attr('href', '/catalog/folder/'+item.id)                    .prepend(item.name);                        var listchild = $('<ul>')                    .attr('class', 'Container');                        var listitem = $( '<li>' )                    .addClass('catalog_sidebar_node Node ExpandClosed')                    .attr('id', item.id);                        listitem.append(divexpand).append(fastlink).append(listchild);                        $( node ).find('ul:first').append(listitem);        }        node.isLoaded = true;        toggleNode(node);    }    showLoading(true);    $.ajax({        url: "/catalog/menu/" + node.id,        dataType: "json",        success: function (data) {            if (!data.errcode) {                onLoaded(data);                showLoading(false);            } else {                showLoading(false);            }        },        cache: false    });}clickExpand = function (event) {    event = event || window.event;    var clickedElem = event.target || event.srcElement;    if (!hasClass(clickedElem, 'Expand')) {        return; // клик не там    }    // Node, на который кликнули    var node = clickedElem.parentNode;    if (hasClass(node, 'ExpandLeaf')) {        return; // клик на листе    }    if (node.isLoaded || node.getElementsByTagName('LI').length) {        // Узел уже загружен через AJAX(возможно он пуст)        toggleNode(node);        return;    }    if (node.getElementsByTagName('LI').length) {        // Узел не был загружен при помощи AJAX, но у него почему-то есть потомки        // Например, эти узлы были в DOM дерева до вызова tree()        // Как правило, это "структурные" узлы        // ничего подгружать не надо        toggleNode(node);        return;    }    // загрузить узел    load(node);};jQuery(document).ready(function($){        var $menu = $("#tree");    $menu.menuAim({        activate: activateSubmenu,        deactivate: function (row) {            var $row = $(row),                submenuId = $row.data("submenuId"),                $submenu = $("#" + submenuId);            // Hide the submenu and remove the row's highlighted look            $submenu.css("display", "none");            $row.find("a").removeClass("maintainHover");        },        exitMenu: function() {            $('#tree').find('a.maintainHover').removeClass('maintainHover');            return true;        }    });    function activateSubmenu(row) {        var $row = $(row),            submenuId = $row.data("submenuId"),            $submenu = $("#" + submenuId),            height = $menu.outerHeight(),            width = $menu.outerWidth();        // Show the submenu        $submenu.css({            display: "block",            top: -1,            left: width - 3,  // main should overlay submenu            height: height - 4  // padding for main dropdown's arrow        });        // Keep the currently activated row's highlighted look        $row.find("a").addClass("maintainHover");    }    function deactivateSubmenu(row) {        alert(2);        var $row = $(row),            submenuId = $row.data("submenuId"),            $submenu = $("#" + submenuId);        // Hide the submenu and remove the row's highlighted look        $submenu.css("display", "none");        $row.find("a").removeClass("maintainHover");    }});